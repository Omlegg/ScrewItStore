@using ScrewItBackEnd.Data
@using ScrewItBackEnd.Entities
@using System.Security.Claims
@model List<Product>?
@inject ScrewItDbContext dbcontext;
@{
    ViewData["Title"] = "Home Page";
}

<style>
    #main-home-page{
        display: flex; 
        align-items: center;
        flex-direction: column;
    }
    
    #search {
        margin-top: 20px;
        height:30px;
        font-size: 15px;
        width: 75vw;
        display: flex;
        justify-content: center;
        font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;
        align-items: center;
        border: 2px solid white;
        border-radius: 5px;
        background-color: rgba(0, 0, 0, 0.242);
        color : white;
    }

    .product-list {
    using ScrewItBackEnd.Data;
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        gap: 20px;
        width:92vw;
        margin-top: 30px;
    }

    .product-card {
        width: 300px;
        text-align: center;
        padding: 15px;
        border-radius: 5px;
        background-color: #f8f9fa;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        display: flex;
        flex-direction: column;
    }
    #image{
        width: 200px;
        height: 200px;
    }
    .details{
    }
    .line{
        width:92%;
        color: grey;
    }
    #suggestionsBox {
    border: 1px solid #ccc;
    max-height: 200px;
    background-color: white;
    width: 75vw;
    z-index: 3;
    border-radius: 2px;
    display: none;
}

.suggestionItem {
    padding: 8px;
    cursor: pointer;
}

.suggestionItem:hover {
    background-color: #f0f0f0;
}
</style>

<div id="main-home-page">

    <h2>All products</h2>
    @if(Model == null || Model.Any() == false) {
        <h3>No products Uploaded Yet :(</h3>
    }
    else {
        <div class="product-list">
            @foreach (var product in Model.Distinct<Product>().ToList())
            {
                <div class="product-card" onclick="window.location.href='@Url.Action("Details", "Product", new { id = product.Id })';" style="cursor: pointer;">
                    <img id="image" src="@product.PictureUrl" />
                    <hr class="line">
                    <div class="details">
                        @{
                            var amount = dbcontext.Carts.FirstOrDefault(c=> c.ProductId == product.Id)?.AmountInCart;
                        
                        }<p><strong>Name:</strong> @product.Name</p>
                        <p><strong>Description:</strong> @product.Description</p>
                        <p><strong>Price:</strong> $@product.Price</p>
                        <p><strong>Total:</strong><span id="total-@product.Id"> $@(product.Price*amount)</span></p>
                        <div style="display:flex; flex-direction: row; justify-content: space-evenly;">
                            <button class="btn btn-danger" onclick="event.stopPropagation();RemoveOneProduct(@product.Id,@product.Price)">-</button>
                            <p ><strong>Amount:</strong> <p id="amount-@product.Id">@amount</p></p>
                            <button class="btn btn-secondary" onclick="event.stopPropagation();AddOneProduct(@product.Id,@product.Price)">+</button>
                        </div>
                        <button class="btn btn-danger" onclick="event.stopPropagation();deleteProduct(@product.Id,'@product.UserId')">Delete From Cart</button>
                    </div>
                </div>
            }
        </div>
    }
</div>

<script>
    async function RemoveOneProduct(productId, productPrice) {
        const amountElement = document.getElementById(`amount-${productId}`);       
        const totalElement = document.getElementById(`total-${productId}`);       
        if(amountElement.innerText > 0){
            amountElement.innerText -=1;
            console.log(productPrice)
            var newTotal= parseInt(amountElement.innerHTML)*productPrice;
            if(newTotal.toString().split(".")[1].length <2){
                
            }
            totalElement.innerText = newTotal;
        }
    }

    async function deleteProduct(productId, userId) {
        try {
            const response = await fetch("http://127.0.0.1:5001/Cart/Delete/", {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ userId: userId, productId: productId })
            });

            if (response.ok) {
                const amountElement = document.getElementById(`amount-${productId}`).remove;
            } else {
                const error = await response.text();
                console.error("Failed to delete:", error);
            }
        } catch (error) {
            console.error("Request failed", error);
        }
    }
    async function AddOneProduct(productId,productPrice) {
        const amountElement = document.getElementById(`amount-${productId}`); 
        const totalElement = document.getElementById(`total-${productId}`);      
        amountElement.innerText = parseInt(amountElement.innerHTML)+1;    
        totalElement.innerText = parseInt(amountElement.innerHTML)*productPrice;    
    }
</script>


